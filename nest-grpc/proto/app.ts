// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v5.29.4
// source: proto/app.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "app";

export interface LoginDto {
  email: string;
  password: string;
}

export interface Login {
  user: User | undefined;
  token: string;
}

export interface Empty {
}

export interface UserIdDto {
  id: string;
}

export interface User {
  id: string;
  name: string;
  email: string;
  password: string;
}

export interface Category {
  id: string;
  name: string;
  userId: string;
}

export interface CreateUserDto {
  name: string;
  email: string;
  password: string;
}

export interface CreateCategoryDto {
  name: string;
  userId: string;
}

export interface CategoryIdDto {
  id: string;
}

export interface UserList {
  users: User[];
}

export interface CategoryList {
  categories: Category[];
}

export interface UserWithCategories {
  user: User | undefined;
  categories: Category[];
}

export interface UserWithCategoriesList {
  users: UserWithCategories[];
}

export const APP_PACKAGE_NAME = "app";

export interface AppClient {
  createUser(request: CreateUserDto): Observable<User>;

  getAllUsers(request: Empty): Observable<UserList>;

  updateUser(request: User): Observable<User>;

  deleteUser(request: UserIdDto): Observable<Empty>;

  createCategory(request: CreateCategoryDto): Observable<Category>;

  getCategoryById(request: CategoryIdDto): Observable<Category>;

  getAllCategories(request: Empty): Observable<CategoryList>;

  getCategoriesByUserId(request: UserIdDto): Observable<CategoryList>;

  updateCategory(request: Category): Observable<Category>;

  deleteCategory(request: CategoryIdDto): Observable<Empty>;

  loginUser(request: LoginDto): Observable<Login>;

  getAllUsersWithCategories(request: Empty): Observable<UserWithCategoriesList>;
}

export interface AppController {
  createUser(request: CreateUserDto): Promise<User> | Observable<User> | User;

  getAllUsers(request: Empty): Promise<UserList> | Observable<UserList> | UserList;

  updateUser(request: User): Promise<User> | Observable<User> | User;

  deleteUser(request: UserIdDto): Promise<Empty> | Observable<Empty> | Empty;

  createCategory(request: CreateCategoryDto): Promise<Category> | Observable<Category> | Category;

  getCategoryById(request: CategoryIdDto): Promise<Category> | Observable<Category> | Category;

  getAllCategories(request: Empty): Promise<CategoryList> | Observable<CategoryList> | CategoryList;

  getCategoriesByUserId(request: UserIdDto): Promise<CategoryList> | Observable<CategoryList> | CategoryList;

  updateCategory(request: Category): Promise<Category> | Observable<Category> | Category;

  deleteCategory(request: CategoryIdDto): Promise<Empty> | Observable<Empty> | Empty;

  loginUser(request: LoginDto): Promise<Login> | Observable<Login> | Login;

  getAllUsersWithCategories(
    request: Empty,
  ): Promise<UserWithCategoriesList> | Observable<UserWithCategoriesList> | UserWithCategoriesList;
}

export function AppControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      "createUser",
      "getAllUsers",
      "updateUser",
      "deleteUser",
      "createCategory",
      "getCategoryById",
      "getAllCategories",
      "getCategoriesByUserId",
      "updateCategory",
      "deleteCategory",
      "loginUser",
      "getAllUsersWithCategories",
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("App", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("App", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const APP_SERVICE_NAME = "App";
